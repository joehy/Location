package com.udacity.project4.locationreminders.savereminder.selectreminderlocationimport android.Manifestimport android.annotation.SuppressLintimport android.content.pm.PackageManagerimport android.content.res.Resourcesimport android.graphics.Colorimport android.os.Bundleimport android.view.*import android.widget.Toastimport androidx.activity.result.ActivityResultLauncherimport androidx.activity.result.contract.ActivityResultContractsimport androidx.core.app.ActivityCompatimport androidx.databinding.DataBindingUtilimport androidx.fragment.app.Fragmentimport com.google.android.gms.location.FusedLocationProviderClientimport com.google.android.gms.location.LocationServicesimport com.google.android.gms.maps.CameraUpdateFactoryimport com.google.android.gms.maps.GoogleMapimport com.google.android.gms.maps.OnMapReadyCallbackimport com.google.android.gms.maps.SupportMapFragmentimport com.google.android.gms.maps.model.*import com.google.android.material.dialog.MaterialAlertDialogBuilderimport com.udacity.project4.Rimport com.udacity.project4.base.BaseFragmentimport com.udacity.project4.base.NavigationCommandimport com.udacity.project4.databinding.FragmentSelectLocationBindingimport com.udacity.project4.locationreminders.savereminder.SaveReminderViewModelimport com.udacity.project4.utils.setDisplayHomeAsUpEnabledimport org.koin.android.ext.android.injectimport timber.log.Timberimport java.util.*class SelectLocationFragment : BaseFragment(), OnMapReadyCallback {    private lateinit var requestPermissionLauncher: ActivityResultLauncher<String>    private lateinit var fusedLocationClient: FusedLocationProviderClient    //Use Koin to get the view model of the SaveReminder    override val _viewModel: SaveReminderViewModel by inject()    private lateinit var binding: FragmentSelectLocationBinding    private lateinit var map: GoogleMap    private var latitude: Double=0.0    private var longitude:Double=0.0    private var name:String=""    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?    ): View {        binding =            DataBindingUtil.inflate(inflater, R.layout.fragment_select_location, container, false)        binding.viewModel = _viewModel        binding.lifecycleOwner = this        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())        setHasOptionsMenu(true)        setDisplayHomeAsUpEnabled(true)        val mapFragment = childFragmentManager            .findFragmentById(R.id.map) as SupportMapFragment        mapFragment.getMapAsync(this)        requestPermission()        onLocationSelected()        return binding.root    }    private fun onLocationSelected() {        binding.saveButtonFragLocation.setOnClickListener {            _viewModel.latitude.value = latitude            _viewModel.longitude.value = longitude            _viewModel.reminderSelectedLocationStr.value = name            _viewModel.navigationCommand.value =                NavigationCommand.To(SelectLocationFragmentDirections.actionSelectLocationFragmentToSaveReminderFragment())        }    }    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {        inflater.inflate(R.menu.map_options, menu)    }    override fun onOptionsItemSelected(item: MenuItem) = when (item.itemId) {        R.id.normal_map -> {            map.mapType = GoogleMap.MAP_TYPE_NORMAL            true        }        R.id.hybrid_map -> {            map.mapType = GoogleMap.MAP_TYPE_HYBRID            true        }        R.id.satellite_map -> {            map.mapType = GoogleMap.MAP_TYPE_SATELLITE            true        }        R.id.terrain_map -> {            map.mapType = GoogleMap.MAP_TYPE_TERRAIN            true        }        else -> super.onOptionsItemSelected(item)    }    override fun onMapReady(p0: GoogleMap) {        map = p0        map.uiSettings.isZoomControlsEnabled = true        setMapStyle(map)        setPoiClick(map)        setMapLongClick(map)        enableUserLocation()        onLocationSelected()    }    @SuppressLint("MissingPermission")    private fun getCurrentLocation() {        fusedLocationClient.lastLocation.addOnSuccessListener(requireActivity()) { location ->            // Got last known location. In some rare situations this can be null.            if (location != null) {                latitude=location.latitude                longitude=location.longitude                name="Current Location"                val currentLatLng = LatLng(latitude, longitude)                val markerOptions = MarkerOptions().position(currentLatLng)                map.addMarker(markerOptions)                map.moveCamera(CameraUpdateFactory.newLatLngZoom(currentLatLng, 10F))            }        }    }    private fun setMapLongClick(map: GoogleMap) {        map.setOnMapLongClickListener { latLng ->            // A Snippet is Additional text that's displayed below the title.            map.clear()            latitude=latLng.latitude            longitude=latLng.longitude            name="unKnown"            val snippet = String.format(                Locale.getDefault(),                "Lat: %1$.5f, Long: %2$.5f",                latLng.latitude,                latLng.longitude            )            map.addMarker(                MarkerOptions()                    .position(latLng)                    .title(getString(R.string.dropped_pin))                    .snippet(snippet)            )            map.addCircle(                CircleOptions()                    .center(latLng)                    .radius(200.0)                    .strokeColor(Color.argb(255,255,0,0))                    .fillColor(Color.argb(64,255,0,0)).strokeWidth(4F)            )        }    }    private fun setPoiClick(map: GoogleMap) {        map.setOnPoiClickListener { poi ->            map.clear()            latitude=poi.latLng.latitude            longitude=poi.latLng.longitude            name=poi.name            val poiMarker = map.addMarker(                MarkerOptions()                    .position(poi.latLng)                    .title(poi.name)            )            map.addCircle(                CircleOptions()                    .center(poi.latLng)                    .radius(200.0)                    .strokeColor(Color.argb(255,255,0,0))                    .fillColor(Color.argb(64,255,0,0)).strokeWidth(4F)            )            poiMarker?.showInfoWindow()        }    }    private fun setMapStyle(map: GoogleMap) {        try {            // Customize the styling of the base map using a JSON object defined            // in a raw resource file.            val success = map.setMapStyle(                MapStyleOptions.loadRawResourceStyle(                    requireContext(),                    R.raw.map_style                )            )            if (!success) {                Timber.e("Style parsing failed.")            }        }catch (e: Resources.NotFoundException) {            Timber.e(e, "Can't find style. Error: ")        }    }    private fun enableUserLocation() {        when {            (ActivityCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION)                    == PackageManager.PERMISSION_GRANTED) -> {                map.isMyLocationEnabled = true                getCurrentLocation()                Toast.makeText(context, "Location permission is granted.", Toast.LENGTH_LONG).show()            }else->{            requestPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)            }        }    }    private fun requestPermission(){         requestPermissionLauncher =            registerForActivityResult(                ActivityResultContracts.RequestPermission()            ) { isGranted: Boolean ->                if (isGranted) {                    enableUserLocation()                } else {                    Toast.makeText(context, "Location permission was not granted.", Toast.LENGTH_LONG).show()                }            }    }    private fun displayDialog(title: String,message: String){        MaterialAlertDialogBuilder(requireContext())            .setTitle(title)            .setMessage(message)            .show()    }}